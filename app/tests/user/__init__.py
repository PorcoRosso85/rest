test_design_for_user = {
    "ログイン": [
        "正常系_ユーザーが存在する",
        "正常系_ログインリクエストを送信し、トークンが発行される",
        "正常系_トークンが正しい",
        "異常系_トークンが発行されない事によるエラーレスポンス確認",
        "正常系_認証情報をリクエストヘッダに付与されている",
        "正常系_ログインリクエストを送信し、アカウント情報が取得できる",
        "正常系_アカウント情報が正しい",
        "異常系_ユーザーが存在しない",
        "異常系_アカウント情報が取得できないエラーレスポンス確認",
        "",
    ],
    "ログアウト": [
        "正常系_ログアウトリクエストを送信し、トークンが無効化される",
        "正常系_トークンが無効化された",
        "異常系_トークンが無効化されない",
    ],
    "アカウント情報取得": [
        "正常系_アカウント情報が正しい",
        "異常系_ユーザーが存在しない",
        "異常系_エラーレスポンスが返却される",
    ],
    "アカウント情報更新": [
        "入力データのバリデーションが正しい",
        "更新後のアカウント情報が正しい",
        "異常系_バリデーションエラー時のエラーレスポンス確認",
    ],
    "パスワード変更": [
        "正常系_パスワードリクエストを送信し、パスワードが変更される",
        {
            "正常系_変更後のパスワードでログインできる": [
                "ログインリクエストを送信し、トークンが発行される",
                "トークンが正しい",
            ]
        },
        "異常系_不正なパスワードリクエストを送信し、エラーレスポンスが返却される",
        "異常系_バリデーションエラー時のエラーレスポンス確認",
    ],
    """
    2要素認証とアカウント削除の詳細化

    2要素認証では、有効化後のログインプロセスの検証や、認証コードの検証を追加する。
    アカウント削除では、削除後のデータベース内でのデータ確認や、削除後にログインできないことを確認するテストを追加する。

    セキュリティテストの追加
    セキュリティ脆弱性に対するテスト（例：SQLインジェクション、クロスサイトスクリプティング）を追加する。

    負荷テストの具体化
    パフォーマンステストにおいて、想定される最大ユーザー数や同時アクセス数に基づいた負荷テストを実施する。

    ユーザーインターフェースのテスト
    現在の設計ではバックエンドのテストに重点が置かれていますが、フロントエンドの動作確認も行う。

    異常系テストの充実
    各機能について、さらに多くの異常系テストケースを追加する。
    エラーレスポンスが返却されるテストは、具体的なエラーコードやメッセージを検証するようにする。

    状態遷移テストの追加
    ユーザーのアカウント状態（例：有効、無効、凍結など）に応じたテストケースを追加する。

    データの整合性と永続性のテスト
    データ更新後にデータベースの整合性を確認するテストを追加する。
    システムの再起動後もデータが保持されることを検証するテストを追加する。
    これらの改善点を取り入れることで、テスト設計の完全性を高め、システムの信頼性をさらに向上させることができます。
    """
    """
    2. テストデータの具体例

    テストケースによっては、テストデータの具体例を記載することで、テストケースの意図がより明確になります。例えば、

    アカウント情報更新 の 異常系_バリデーションエラー時のエラーレスポンス確認
    パスワード変更 の 異常系_不正なパスワードリクエストを送信し、エラーレスポンスが返却される
    これらのテストケースでは、どのような入力データでどのようなエラーレスポンスを期待するのかを具体的に記述することで、テストの実行と結果の判断がより明確になります。

    3. エラーハンドリング

    エラーハンドリングのテストケースは、想定されるエラーの種類を網羅的に検証する必要があります。例えば、

    サーバーエラー
    ネットワークエラー
    タイムアウトエラー
    これらのエラーが発生した場合、どのような処理が行われるのかをテストケースに記述することで、システムの安定性を検証できます。

    4. パフォーマンステスト

    パフォーマンステストは、システムの負荷に対する耐性を検証するために重要です。テストケースに、

    処理速度
    応答時間
    リソース使用量
    などの指標を測定するための項目を追加することで、システムのパフォーマンスをより詳細に検証できます。

    その他

    テストケースの実行順序について、考慮が必要な場合があります。例えば、アカウント削除の前に他の機能のテストを実施する必要があります。
    テストケースの自動化について検討すると、テストの実行効率を向上できます。
    
    改善点の具体例

    アカウント情報更新 の 正常系_アカウント情報を更新できる を以下のテストケースに分割
        名前変更
        メールアドレス変更
        パスワード変更
    アカウント情報更新 の 異常系_バリデーションエラー時のエラーレスポンス確認 に具体的な入力データと期待されるエラーレスポンスを追加
    パスワード変更 の 異常系_不正なパスワードリクエストを送信し、エラーレスポンスが返却される に具体的なパスワード形式と期待されるエラーレスポンスを追加
    エラーハンドリングのテストケースに、サーバーエラー、ネットワークエラー、タイムアウトエラーなどのテストケースを追加
    パフォーマンステストに、処理速度、応答時間、リソース使用量などの測定項目を追加
    画像のテストケースへの反映

    アカウント削除後の画面遷移、削除されたアカウント情報へのアクセス確認のテストケースを追加
    アイコンアップロード機能のテストケースを追加
    その他

    テストケースの実行順序、テストケースの自動化について検討
    """
    "2要素認証": [
        {
            "正常系_2要素認証リクエストを送信し、2要素認証が有効化される": [
                "2要素認証コードが発行される",
                "2要素認証コードが正しい",
            ]
        },
        "正常系_2要素認証コードを検証し、ログインできる",
        "正常系_2要素認証コードを検証し、アカウント情報が取得できる",
        "正常系_2要素認証コードを検証し、アカウント情報が正しい",
        "異常系_2要素認証コードが発行されない",
        "異常系_2要素認証コードが正しくない",
        "異常系_2要素認証コードを検証し、エラーレスポンスが返却される",
        "正常系_2要素認証を無効化する",
        {
            "正常系_2要素認証が無効化された": [
                "２要素認証コードが無効化される",
                "無効化後ログインができないことを確認",
            ]
        },
    ],
    "アカウント削除": [
        {"アカウント削除確認": []},
        "削除失敗時のエラーレスポンス確認",
    ],
    "エンドポイント": [
        "GETリクエスト：正しいJSONレスポンス確認",
        "POSTリクエスト：データ作成・レスポンスコード確認",
        "PUT/PATCHリクエスト：データ更新テスト",
        "DELETEリクエスト：データ削除確認",
    ],
    "シリアライザ": [
        "リクエストデータシリアライズの正確性確認",
        "レスポンスデータデシリアライズの正確性確認",
    ],
    "エラーハンドリング": [
        "不正リクエストに対するエラーレスポンス検証",
        "予期せぬエラー発生時の処理確認",
    ],
}


import pytest

from app.utils import logger


class TestGetAccountInfo:
    @pytest.mark.django_db
    def test_ログインユーザー情報取得確認(
        self,
        check_user_exist=True,
        check_request_header=True,
    ):
        assert check_user_exist, "正常系_ユーザーが存在する"
        assert check_request_header, "正常系_認証情報をリクエストヘッダに付与されている"
        assert True, "正常系_ログインリクエストを送信し、アカウント情報が取得できる"
        assert True, "正常系_アカウント情報が正しい"

    @pytest.mark.django_db
    def test_異常系_ユーザーが存在しない(self):
        pass

    @pytest.mark.django_db
    def test_異常系_エラーレスポンスが返却される(self):
        pass

    logger.debug("### アカウント情報の更新")
